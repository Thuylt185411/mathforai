import random
import math
from sklearn.datasets import make_blobs
import matplotlib.pyplot as plt
import numpy as np




# choose k points -> 1 centroid
def initialize_centroids(X, k):
    indices = random.sample(range(len(X)), k)
    return [X[i] for i in indices]

# compute distance
def euclidean_distance(p1,p2):
    return np.sqrt(sum((x1-x2)**2 for x1, x2 in zip(p1,p2)))

# assign each data - to closet centroid -> clusters
def assign_point_to_clusters(X, centroids):
    clusters = []
    for point in X:
        distances = [euclidean_distance(point, centroid) for centroid in centroids]
        
        cluster = distances.index(min(distances))
        clusters.append(cluster)

    return clusters

# new_centroid = mean of clusters
def update_centroids (X , clusters , k ) :
    centroids = [[] for _ in range ( k ) ]

    for i , cluster in enumerate(clusters):
        centroids[cluster].append(X[i])
    return [calculate_mean(cluster_points) for cluster_points in centroids]

def calculate_mean(points):
    num_points = len( points )
    if num_points == 0:
        return []
    dimension = len(points[0])
    mean = [0] * dimension
    for point in points :
        for i in range(dimension) :
            mean[i] += point[i]
    return [coord/num_points for coord in mean ]


def has_converged(old_centroids, new_centroids, epsilon=1e-6) :
    return all(euclidean_distance(old_centroids[i], new_centroids[i]) < epsilon 
               for i in range (len(old_centroids)))



def kmeans(X , k , max_iters =100) :
    centroids = initialize_centroids(X, k)
    

    for _ in range(max_iters) :
        # Assign data points to clusters
        clusters = assign_point_to_clusters(X, centroids)

        # Update centroids
        new_centroids = update_centroids(X, clusters, k)

        # Check convergence
        if has_converged(centroids, new_centroids):
            break

        centroids = new_centroids
        plt.scatter( X[:,0], X[:,1], c=clusters)
        plt.scatter([centroid[0] for centroid in centroids],
                    [centroid[1] for centroid in centroids ], 
                    marker ='X', 
                    color ='red',
                    )
        plt.show(5)
    return clusters , centroids


# Example usage
X , _ = make_blobs(n_samples=100, centers =3, random_state =5)
clusters, centroids = kmeans(X , k =3)


# Plot the clusters
plt.scatter( X[:,0], X[:,1], c=clusters)
plt.scatter([centroid[0] for centroid in centroids],
              [centroid[1] for centroid in centroids ], 
             marker ='X', 
             color ='red',
             )
plt.show()
